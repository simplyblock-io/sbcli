from simplyblock_cli.clibase import CLIWrapperBase
from simplyblock_core import utils
import argparse
import logging
import sys

class CLIWrapper(CLIWrapperBase):

    def __init__(self):
        self.developer_mode = True if "--dev" in sys.argv else False
        if self.developer_mode:
            idx = sys.argv.index("--dev")
            args = sys.argv[0:idx]
            for i in range(idx + 1, len(sys.argv)):
                args.append(sys.argv[i])
            sys.argv = args

        self.experimental_mode = True if "--experimental" in sys.argv else False
        if self.experimental_mode:
            idx = sys.argv.index("--experimental")
            args = sys.argv[0:idx]
            for i in range(idx + 1, len(sys.argv)):
                args.append(sys.argv[i])
            sys.argv = args

        self.logger = utils.get_logger()
        self.init_parser()

{%- for command in commands %}
        self.init_{{ command.name | make_identifier }}()
{%- endfor %}
        super().__init__()

{%- for command in commands %}

    def init_{{ command.name | make_identifier }}(self):
        subparser = self.add_command('{{ command.name }}', '{{ command.help | escape_strings | escape_python_string }}'{% if command.aliases is defined %}, aliases=[{% for alias in command.aliases %}'{{ alias }}',{% endfor %}]{% endif %})

{%- for subcommand in command.subcommands %}
{%- if subcommand.private %}
        if self.developer_mode:
            self.init_{{ command.name | make_identifier }}__{{ subcommand.name | make_identifier }}(subparser)
{%- elif subcommand.experimental %}
        if self.experimental_mode:
            self.init_{{ command.name | make_identifier }}__{{ subcommand.name | make_identifier }}(subparser)
{%- else %}
        self.init_{{ command.name | make_identifier }}__{{ subcommand.name | make_identifier }}(subparser)
{%- endif %}
{%- endfor %}

{% for subcommand in command.subcommands %}
    def init_{{ command.name | make_identifier }}__{{ subcommand.name | make_identifier }}(self, subparser):
        subcommand = self.add_sub_command(subparser, '{{ subcommand.name }}', '{{ subcommand.help | escape_strings | escape_python_string }}')

{%- for argument in subcommand.arguments %}
        subcommand.add_argument('{{ argument.name }}', help='{{ argument.help | escape_strings | escape_python_string }}', type={{ argument.type }}
{%- if argument.default is defined and argument.action is undefined %}, default={{ argument | default_value }}{% endif %}
{%- if argument.action is defined %}, dest='{{ argument.action }}'{% endif %})
{%- if argument.completer is defined %}.completer = self.{{ argument.completer }}{% endif %}
{%- endfor -%}
{%- for parameter in subcommand.parameters %}
{%- if parameter.private %}
        argument = subcommand.add_argument('{{ parameter.name }}', help='{{ parameter.help | escape_strings | escape_python_string }}' if self.developer_mode else argparse.SUPPRESS
{%- elif parameter.experimental %}
        argument = subcommand.add_argument('{{ parameter.name }}', help='{{ parameter.help | escape_strings | escape_python_string }}' if self.experimental_mode else argparse.SUPPRESS
{%- else %}
        argument = subcommand.add_argument('{{ parameter.name }}', help='{{ parameter.help | escape_strings | escape_python_string }}'
{%- endif -%}
{%- if parameter.type is defined and parameter.action is undefined %}, type={{ parameter.type }}{% endif %}
{%- if parameter.default is defined and parameter.action is undefined %}, default={{ parameter | default_value }}{% endif %}
{%- if parameter.dest is defined %}, dest='{{ parameter.dest }}'{% endif %}
{%- if parameter.required is defined %}, required={{ parameter | required }}{% endif %}
{%- if parameter.nargs is defined %}, nargs='{{ parameter.nargs }}'{% endif %}
{%- if parameter.choices %}, choices=[{% for choice in parameter.choices %}'{{ choice }}',{% endfor %}]{% endif %}
{%- if parameter.value_range %}, choices=range({{ parameter.value_range | split_value_range }}){% endif %}
{%- if parameter.action is defined %}, action='{{ parameter.action }}'{% endif %})
{%- if parameter.completer is defined %}.completer = self.{{ parameter.completer }}{% endif %}
{%- endfor %}
{% endfor -%}
{%- endfor %}

    def run(self):
        args = self.parser.parse_args()
        if args.debug:
            self.logger.setLevel(logging.DEBUG)
        else:
            self.logger.setLevel(logging.INFO)

        logging.getLogger("urllib3.connectionpool").setLevel(logging.WARNING)

        ret = ""
        args_dict = args.__dict__

{%- for command in commands %}
{%- if loop.index == 1 %}
        if args.command in ['{{ command.name }}'{% if command.aliases is defined %}{% for alias in command.aliases %}, '{{ alias }}'{% endfor %}{% endif %}]:
{%- else %}
        elif args.command in ['{{ command.name }}'{% if command.aliases is defined %}{% for alias in command.aliases %}, '{{ alias }}'{% endfor %}{% endif %}]:
{%- endif %}
            sub_command = args_dict['{{ command.name }}']
{%- for subcommand in command.subcommands %}
{%- if loop.index == 1 %}
            if sub_command in ['{{ subcommand.name }}'{% if subcommand.aliases is defined %}{% for alias in subcommand.aliases %}, '{{ alias }}'{% endfor %}{% endif %}]:
{%- else %}
            elif sub_command in ['{{ subcommand.name }}'{% if subcommand.aliases is defined %}{% for alias in subcommand.aliases %}, '{{ alias }}'{% endfor %}{% endif %}]:
{%- endif -%}
{%- for argument in subcommand.arguments -%}
{%- if argument.dest is defined and argument.dest != argument.name %}
                args.{{ argument.dest }} = args.{{ argument.name }}
{%- endif -%}
{%- endfor %}
{%- set ns = namespace(if_opened = False) %}
{%- if subcommand.private %}
                if not self.developer_mode:
                    print("This command is private.")
                    ret = False
                else:
                    ret = self.{{ command.name | make_identifier }}__{{ subcommand.name | make_identifier }}(sub_command, args)
{%- else %}
                ret = self.{{ command.name | make_identifier }}__{{ subcommand.name | make_identifier }}(sub_command, args)
{%- endif -%}
{%- endfor %}
            else:
                self.parser.print_help()
{% endfor %}
        else:
            self.parser.print_help()

        if not ret:
            return False

        print(ret)


def main():
    cli = CLIWrapper()
    cli.run()
