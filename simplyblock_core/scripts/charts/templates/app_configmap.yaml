---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simplyblock-config
  namespace: {{ .Release.Namespace }}

data:
  LOG_LEVEL: {{ .Values.log.level }}
  FDB_CLUSTER_FILE_CONTENTS: {{ .Values.foundationdb.fdbClusterFileContent }}
  LOG_DELETION_INTERVAL: {{ .Values.log.deletionInterval }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simplyblock-haproxy-config
  namespace: {{ .Release.Namespace }}
data:
  haproxy.cfg: |
    global
        log          fd@2 local2
        chroot       /var/lib/haproxy
        pidfile      /var/run/haproxy.pid
        maxconn      4000
        user         haproxy
        group        haproxy
        stats socket /var/lib/haproxy/stats expose-fd listeners
        master-worker

    resolvers kube-dns
        nameserver dns1 kube-dns.kube-system.svc.cluster.local:53
        resolve_retries 3
        timeout resolve 1s
        timeout retry   1s
        hold other      10s
        hold refused    10s
        hold nx         10s
        hold timeout    10s
        hold valid      10s
        hold obsolete   10s

    defaults
        timeout connect 10s
        timeout client 120s
        timeout server 120s
        log global
        mode http
        option httplog

    backend stat
        stats enable
        stats uri /
        stats refresh 10s
        stats show-legends
        stats show-node
        stats hide-version
        stats auth admin:admin

    backend haproxy_services
        http-request set-path %[path,regsub(^/haproxy/?,/)]
        stats enable
        stats uri /
        stats refresh 10s
        stats show-legends
        stats show-node

    backend graylog_input_services
        mode tcp
        balance roundrobin
        server-template graylog_input- 1 simplyblock-graylog.{{ .Release.Namespace }}.svc.cluster.local:12201 check resolvers kube-dns init-addr libc,none


    frontend graylog_input_front
        bind *:12202
        mode tcp
        default_backend graylog_input_services


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: simplyblock-fluent-bit-config
  namespace: {{ .Release.Namespace }}
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush        1
        Daemon       Off
        Log_Level    info
        Parsers_File parsers.conf

    [INPUT]
        Name              tail
        Path              /var/log/containers/*.log
        Parser            docker
        Tag               kube.*
        Refresh_Interval  5
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On
        DB                /var/log/flb_kube.db

    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Merge_Log           On
        Merge_Log_Key       log
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off

    [FILTER]
        Name      lua
        Match     kube.*
        script    filter.lua
        call      filter_tagged_pods

    [OUTPUT]
        Name          gelf
        Match         *
        Host          simplyblock-haproxy
        Port          12202
        Mode          tcp
        Gelf_Short_Message_Key log

  parsers.conf: |
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

  filter.lua: |
    function filter_tagged_pods(tag, timestamp, record)
        annotations = record["kubernetes"]["annotations"]
        if annotations ~= nil and annotations["log-collector/enabled"] == "true" then
            return 1, record
        end
        return -1, record
    end

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: {{ .Release.Namespace }}
data:
  "12201": "{{ .Release.Namespace }}/simplyblock-graylog:12201"
  "4500": "{{ .Release.Namespace }}/simplyblock-fdb-server:4500"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fdb-cluster-file
  namespace: {{ .Release.Namespace }}
data:
  fdb.cluster: |
    {{ .Values.foundationdb.fdbClusterFileContent }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simplyblock-fdb-entrypoint-script
  namespace: {{ .Release.Namespace }}
data:
  fdb.bash: |
    #!/bin/bash

    function create_cluster_file() {
        FDB_CLUSTER_FILE=${FDB_CLUSTER_FILE:-/etc/foundationdb/fdb.cluster}
        mkdir -p "$(dirname $FDB_CLUSTER_FILE)"

        if [[ -n "$FDB_CLUSTER_FILE_CONTENTS" ]]; then
            echo "$FDB_CLUSTER_FILE_CONTENTS" > "$FDB_CLUSTER_FILE"
        elif [[ -n $FDB_COORDINATOR ]]; then
            coordinator_ip=$(dig +short "$FDB_COORDINATOR")
            if [[ -z "$coordinator_ip" ]]; then
                echo "Failed to look up coordinator address for $FDB_COORDINATOR" 1>&2
                exit 1
            fi
            coordinator_port=${FDB_COORDINATOR_PORT:-4500}
            echo "docker:docker@$coordinator_ip:$coordinator_port" > "$FDB_CLUSTER_FILE"
        else
            echo "FDB_COORDINATOR environment variable not defined" 1>&2
            exit 1
        fi
    }

    function create_server_environment() {
        env_file=/var/fdb/.fdbenv

        if [[ "$FDB_NETWORKING_MODE" == "host" ]]; then
            public_ip=127.0.0.1
        elif [[ "$FDB_NETWORKING_MODE" == "container" ]]; then
            public_ip=$(hostname -i | awk '{print $1}')
        else
            echo "Unknown FDB Networking mode \"$FDB_NETWORKING_MODE\"" 1>&2
            exit 1
        fi

        public_ip=192.168.10.81
        echo "export PUBLIC_IP=$public_ip" > $env_file
        if [[ -z $FDB_COORDINATOR && -z "$FDB_CLUSTER_FILE_CONTENTS" ]]; then
            FDB_CLUSTER_FILE_CONTENTS="docker:docker@$public_ip:$FDB_PORT"
        fi

        create_cluster_file
    }

    create_server_environment
    source /var/fdb/.fdbenv
    echo "Starting FDB server on $PUBLIC_IP:$FDB_PORT"
    fdbserver --listen-address 0.0.0.0:"$FDB_PORT" --public-address "$PUBLIC_IP:$FDB_PORT" \
        --datadir /var/fdb/data --logdir /var/fdb/logs \
        --locality-zoneid="$(hostname)" --locality-machineid="$(hostname)" --class "$FDB_PROCESS_CLASS"
