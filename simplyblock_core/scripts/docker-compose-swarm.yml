version: '3.8'

services:
  fdb-server:
    image: foundationdb/foundationdb:7.3.2
    networks:
      - hostnet
    environment:
      FDB_CLUSTER_FILE_CONTENTS: '$FDB_CLUSTER_FILE_CONTENTS'
      FDB_NETWORKING_MODE: 'container'
      FDB_CLUSTER_FILE: '/etc/foundationdb/fdb.cluster'
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"
      - "/etc/foundationdb/data:/var/fdb/data"
      - "/etc/foundationdb/logs:/var/fdb/logs"

    deploy:
      mode: global
      placement:
        constraints: [ node.role == manager ]

  WebAppAPI:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_web/app.py"
    deploy:
      endpoint_mode: dnsrr
      mode: global
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"
    environment:
      - FLASK_DEBUG=False
      - FLASK_ENV=production

  CLI:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "bash simplyblock_core/scripts/run_ssh.sh $CLI_SSH_PASS"
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
    ports:
      - 2222:22
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  StorageNodeMonitor:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/storage_node_monitor.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"
    networks:
      - hostnet

  MgmtNodeMonitor:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/mgmt_node_monitor.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"
    networks:
      - hostnet

  CachingNodeMonitor:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/caching_node_monitor.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"
    networks:
      - hostnet

  LVolStatsCollector:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/lvol_stat_collector.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  PortStatsCollector:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/port_stat_collector.py"
    networks:
      - hostnet
    deploy:
      mode: global
      placement:
        constraints: [node.role == worker]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  DistrEventCollector:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/distr_event_collector.py"
    networks:
      - hostnet
    deploy:
      mode: global
      placement:
        constraints: [node.role == worker]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - 8081:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

  HAProxy:
    image: haproxytech/haproxy-debian:latest
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
    ports:
      - 80:80
      - 8404:8404
    volumes:
      - "$DIR/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"

  CapacityAndStatsCollector:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/capacity_and_stats_collector.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  CapacityMonitor:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/cap_monitor.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  HealthCheck:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/health_check_service.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  DeviceMonitor:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/device_monitor.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  LVolMonitor:
    image: $SIMPLYBLOCK_DOCKER_IMAGE
    command: "python simplyblock_core/services/lvol_monitor.py"
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - "/etc/foundationdb:/etc/foundationdb"

  ### monitoring ###
  mongodb:
    image: "mongo:5.0"
    volumes:
      - "mongodb_data:/data/db"
    deploy:
      placement:
        constraints: [node.role == manager]

  opensearch:
    image: "opensearchproject/opensearch:2.4.0"
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "bootstrap.memory_lock=true"
      - "discovery.type=single-node"
      - "action.auto_create_index=false"
      - "plugins.security.ssl.http.enabled=false"
      - "plugins.security.disabled=true"
    volumes:
      - "os_data:/usr/share/opensearch/data"
    deploy:
      placement:
        constraints: [node.role == manager]

  graylog:
    hostname: "server"
    image: "graylog/graylog:5.0"
    entrypoint: "/usr/bin/tini -- wait-for-it opensearch:9200 --  /docker-entrypoint.sh"
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/config/node-id"
      GRAYLOG_PASSWORD_SECRET: "${GRAYLOG_PASSWORD_SECRET}"
      GRAYLOG_ROOT_PASSWORD_SHA2: "${GRAYLOG_ROOT_PASSWORD_SHA2}"
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://opensearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://mongodb:27017/graylog"
    ports:
    - "5044:5044/tcp"   # Beats
    - "5140:5140/udp"   # Syslog
    - "5140:5140/tcp"   # Syslog
    - "5555:5555/tcp"   # RAW TCP
    - "5555:5555/udp"   # RAW TCP
    - "9000:9000/tcp"   # Server API
    - "12201:12201/tcp" # GELF TCP
    - "12201:12201/udp" # GELF UDP
    - "13301:13301/tcp" # Forwarder data
    - "13302:13302/tcp" # Forwarder config
    volumes:
      - "graylog_data:/usr/share/graylog/data/data"
      - "graylog_journal:/usr/share/graylog/data/journal"
    deploy:
      placement:
        constraints: [node.role == manager]

  promagent:
    image: simplyblock/promagent
    environment:
      ClusterID: "${CLUSTER_ID}"
      ClusterIP: "${CLUSTER_IP}"
      ClusterSecret: "${CLUSTER_SECRET}"
    deploy:
      placement:
        constraints: [node.role == manager]

  pushgateway:
    image: prom/pushgateway
    deploy:
      placement:
        constraints: [node.role == manager]

  prometheus:
    image: prom/prometheus:v2.44.0
    user: root
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    restart: "always"
    deploy:
      placement:
        constraints: [node.role == manager]

  node-exporter:
    image: prom/node-exporter:v1.7.0
    deploy:
      placement:
        constraints: [node.role == worker]

  grafana:
    image: grafana/grafana:10.0.12
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "${CLUSTER_SECRET}"
      GF_ALERTING_ENABLED: "true"
      GF_PATHS_PROVISIONING: "/etc/grafana/provisioning"
    volumes:
      - ./datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - grafana_data:/var/lib/grafana
      - ./alerting:/etc/grafana/provisioning/alerting
    restart: "always"
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
    deploy:
      placement:
        constraints: [node.role == manager]

  ### monitoring ###

volumes:
  mongodb_data:
  os_data:
  graylog_data:
  graylog_journal:
  grafana_data:
  prometheus_data:
  alertmanager_data:

networks:
  hostnet:
    external: true
    name: host
