name: E2E Tests

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 5 * * *'  # Runs every day at 5 AM UTC
  workflow_dispatch:
    inputs:
      simplyBlockDeploy_branch:
        description: ''
        required: true
        default: 'main'
      sbcli_cmd:
        description: ''
        required: true
        default: 'sbcli-dev'
      testname:
        description: 'Name of test tor run. Empty to run all'
        required: false
        default: ''
jobs:
  e2e:
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - run: go version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Clone simplyBlockDeploy repo
        run: |
          git clone -b ${{ github.event.inputs.simplyBlockDeploy_branch || 'main'}} git@github.com:simplyblock-io/simplyBlockDeploy.git $GITHUB_WORKSPACE/simplyBlockDeploy

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform init

      - name: select or create workspace
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform workspace select -or-create githubactions-sbclie2e

      - name: Validate Terraform Configuration
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform validate

      - name: Plan Terraform Changes
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform plan \
            -var "mgmt_nodes=1" -var "storage_nodes=3" \
            -var "extra_nodes=1" -var "extra_nodes_instance_type=m6id.large" \
            -var "region=us-east-2" -var "sbcli_cmd=${{ github.event.inputs.sbcli_cmd || 'sbcli-dev' }}" -out=tfplan

      - name: Apply Terraform Changes
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform apply tfplan

      - name: Get Terraform Outputs
        id: terraform_outputs
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          output_bastion_public_ip=$(terraform output -raw bastion_public_ip)
          echo "::set-output name=bastion_public_ip::$output_bastion_public_ip"
          output_key_name=$(terraform output -raw key_name)
          echo "::set-output name=key_name::$output_key_name"
      - name: Bootstrap Cluster
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          ./bootstrap-cluster.sh --memory 8g --cpu-mask 0x3 --iobuf_small_pool_count 10000 --iobuf_large_pool_count 25000
        id: bootstrap_cluster
        env:
          SBCLI_CMD: ${{ github.event.inputs.sbcli_cmd || 'sbcli-dev' }}

      - name: Setup Tests & Run Tests
        run: |
          cd $GITHUB_WORKSPACE/e2e
          sudo apt-get install -y python3.12-venv
          python3 -m venv myenv
          source myenv/bin/activate
          python3 -m pip install -r requirements.txt
          echo "Running tests in namespace ${{ steps.get-namespace.outputs.namespace }}"
          export CLUSTER_ID=${{ steps.bootstrap_cluster.outputs.cluster_id }}
          export CLUSTER_SECRET=${{ steps.bootstrap_cluster.outputs.cluster_secret }}
          export CLUSTER_IP=${{ steps.bootstrap_cluster.outputs.cluster_ip }}
          export API_BASE_URL=${{ steps.bootstrap_cluster.outputs.cluster_api_gateway_endpoint }}
          export BASTION_SERVER=${{ steps.terraform_outputs.outputs.bastion_public_ip }}
          export KEY_NAME=${{ steps.terraform_outputs.outputs.key_name }}
          TESTNAME=""
          if [ -n "${{ github.event.inputs.testname }}" ]; then
            TESTNAME="--testname ${{ github.event.inputs.testname }}"
          fi
          python3 e2e.py $TESTNAME

      - name: Upload automation and docker logs to s3
        run: |
          cd $GITHUB_WORKSPACE/e2e/logs
          ./upload_logs.sh
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          ./upload_docker_logs_to_s3.sh
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: "simplyblock-e2e-test-logs"
          RUN_ID: ${{ github.run_id }}

      - name: Parse test results
        id: parse_results
        run: |
          cd $GITHUB_WORKSPACE/e2e/logs

          # Find the latest non-empty log file
          LATEST_LOG=$(ls -t *.log | head -n 1)
          while [ ! -s "$LATEST_LOG" ]; do
            LATEST_LOG=$(ls -t *.log | tail -n +2 | head -n 1)
          done

          # Parse the identified log file
          TOTAL_TESTS=$(grep -i "Number of Total Cases" "$LATEST_LOG" | awk '{print $NF}')
          PASSED_TESTS=$(grep -i "Number of Passed Cases" "$LATEST_LOG" | awk '{print $NF}')
          FAILED_TESTS=$(grep -i "Number of Failed Cases" "$LATEST_LOG" | awk '{print $NF}')
          PASSED_CASES=$(grep -i "PASSED CASE" "$LATEST_LOG" | awk '{print $1}' | xargs)
          FAILED_CASES=$(grep -i "FAILED CASE" "$LATEST_LOG" | awk '{print $1}' | xargs)

          # Create a detailed test results summary
          TEST_RESULTS=$(grep -iE "PASSED CASE|FAILED CASE" "$LATEST_LOG")

          # Format passed and failed cases as bullet points
          PASSED_CASES_BULLETS=$(grep -i "PASSED CASE" "$LATEST_LOG" | awk '{print "• " $1}' | xargs printf "%s\\n")
          FAILED_CASES_BULLETS=$(grep -i "FAILED CASE" "$LATEST_LOG" | awk '{print "• " $1}' | xargs printf "%s\\n")

          echo "PASSED_TESTS=${PASSED_TESTS}" >> $GITHUB_ENV
          echo "FAILED_TESTS=${FAILED_TESTS}" >> $GITHUB_ENV
          echo "TOTAL_TESTS=${TOTAL_TESTS}" >> $GITHUB_ENV
          echo "PASSED_CASES=${PASSED_CASES}" >> $GITHUB_ENV
          echo "FAILED_CASES=${FAILED_CASES}" >> $GITHUB_ENV
          echo "PASSED_CASES_BULLETS<<EOF" >> $GITHUB_ENV
          echo "${PASSED_CASES_BULLETS}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "FAILED_CASES_BULLETS<<EOF" >> $GITHUB_ENV
          echo "${FAILED_CASES_BULLETS}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TEST_RESULTS<<EOF" >> $GITHUB_ENV
          echo "${TEST_RESULTS}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_RUN_URL: ${{ github.run_url }}
          S3_BUCKET_NAME: "simplyblock-e2e-test-logs"
          RUN_ID: ${{ github.run_id }}
          PASSED_TESTS: ${{ env.PASSED_TESTS }}
          FAILED_TESTS: ${{ env.FAILED_TESTS }}
          TOTAL_TESTS: ${{ env.TOTAL_TESTS }}
          PASSED_CASES: ${{ env.PASSED_CASES }}
          FAILED_CASES: ${{ env.FAILED_CASES }}
          PASSED_CASES_BULLETS: ${{ env.PASSED_CASES_BULLETS }}
          FAILED_CASES_BULLETS: ${{ env.FAILED_CASES_BULLETS }}
          TEST_RESULTS: ${{ env.TEST_RESULTS }}
          TRIGGER_EVENT: ${{ github.event_name }}
          TRIGGER_DETAILS: ${{ github.event.head_commit.message }}
          TRIGGER_ACTOR: ${{ github.actor }}
        run: |
          AWS_LOGS_URL="s3://${S3_BUCKET_NAME}/${RUN_ID}"
          MESSAGE="Python E2E tests run triggered by ${TRIGGER_ACTOR} via ${TRIGGER_EVENT}. Commit message: ${TRIGGER_DETAILS}\nGitHub Run: ${GITHUB_RUN_URL}\nAWS Logs: ${AWS_LOGS_URL}\n\nTotal Tests: ${TOTAL_TESTS}\n\n- Test Cases Passed :white_check_mark:\n${PASSED_CASES_BULLETS}\n- Test Cases Failed :x:\n${FAILED_CASES_BULLETS}\n\nTest Results:\n${TEST_RESULTS}"
          
          if [[ ${{ job.status }} == 'success' ]]; then
            curl -X POST -H 'Content-type: application/json' --data '{"text":":white_check_mark: '${MESSAGE}'"}' $SLACK_WEBHOOK_URL
          else
            curl -X POST -H 'Content-type: application/json' --data '{"text":":x: '${MESSAGE}'"}' $SLACK_WEBHOOK_URL
          fi

      - name: Destroy Cluster
        if: always()
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform destroy --auto-approve

      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
