name: E2E Tests

on:
  push:
    branches:
      - pre-release
      - sbcli
  schedule:
    - cron: '0 5 * * *'  # Runs every day at 5 AM UTC
  workflow_dispatch:
    inputs:
      simplyBlockDeploy_branch:
        description: 'Branch for simplyBlockDeploy'
        required: true
        default: 'main'
      sbcli_cmd:
        description: 'Command for sbcli execution'
        required: true
        default: 'sbcli-dev'
      testname:
        description: 'Name of test to run. Empty to run all'
        required: false
        default: ''
      send_slack_notification:
        description: 'Send Slack notification?'
        required: false
        default: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/pre-release') ? 'true' : 'false' }}
        type: boolean
      ndcs:
        description: 'Number of data chunks'
        required: false
        default: 1
      npcs:
        description: 'Number of parity chunks'
        required: false
        default: 1
      bs:
        description: 'Block size'
        required: false
        default: 4096
      chunk_bs:
        description: 'Chunk block size'
        required: false
        default: 4096

jobs:
  e2e:
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - run: go version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: actions/checkout@master
        name: Checkout code simplyBlockDeploy
        with:
          repository: simplyblock-io/simplyBlockDeploy
          ref: refs/heads/${{ github.event.inputs.simplyBlockDeploy_branch || 'main'}}
          path: 'simplyBlockDeploy'
          token: ${{ secrets.GH_ACCESS_KEY_ID_HAMDI }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          export TFSTATE_BUCKET=simplyblock-terraform-state-bucket
          export TFSTATE_KEY=csi
          export TFSTATE_REGION=us-east-2
          export TFSTATE_DYNAMODB_TABLE=terraform-up-and-running-locks

          terraform init -reconfigure \
              -backend-config="bucket=${TFSTATE_BUCKET}" \
              -backend-config="key=${TFSTATE_KEY}" \
              -backend-config="region=${TFSTATE_REGION}" \
              -backend-config="dynamodb_table=${TFSTATE_DYNAMODB_TABLE}" \
              -backend-config="encrypt=true"

      - name: Select or create workspace
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform workspace select -or-create ghiaction-sbclie2e

      - name: Plan Terraform Changes
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform plan \
            -var "mgmt_nodes=1" -var "storage_nodes=3" -var "volumes_per_storage_nodes=3" \
            -var mgmt_nodes_instance_type="m6id.xlarge" -var storage_nodes_instance_type="m6i.xlarge" \
            -var "extra_nodes=1" -var "extra_nodes_instance_type=m6id.xlarge" \
            -var storage_nodes_ebs_size2=100 -var "region=us-east-2" \
            -var "sbcli_cmd=${{ github.event.inputs.sbcli_cmd || 'sbcli-dev' }}" -out=tfplan

      - name: Apply Terraform Changes
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform apply tfplan

      - name: Bootstrap Cluster
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          ./bootstrap-cluster.sh --sbcli-cmd "${{ github.event.inputs.sbcli_cmd }}" \
            --max-lvol 10 --max-snap 10 --max-prov 900g --number-of-devices 3 \
            --distr-ndcs ${{ github.event.inputs.ndcs }} \
            --distr-npcs ${{ github.event.inputs.npcs }} \
            --distr-bs ${{ github.event.inputs.bs }} \
            --distr-chunk-bs ${{ github.event.inputs.chunk_bs }}

      - name: Record Test Start Time
        run: echo "TEST_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Setup Tests & Run Tests
        timeout-minutes: 120
        run: |
          cd $GITHUB_WORKSPACE/e2e
          sudo apt-get install -y python3.12-venv
          python3 -m venv myenv
          source myenv/bin/activate
          python3 -m pip install -r requirements.txt
          echo "Running tests in namespace ${{ steps.get-namespace.outputs.namespace }}"
          TESTNAME=""
          if [ -n "${{ github.event.inputs.testname }}" ]; then
            TESTNAME="--testname ${{ github.event.inputs.testname }}"
          fi
          
          python3 e2e.py --ndcs "${{ github.event.inputs.ndcs }}" \
                          --npcs "${{ github.event.inputs.npcs }}" \
                          --bs "${{ github.event.inputs.bs }}" \
                          --chunk_bs "${{ github.event.inputs.chunk_bs }}" \
                          $TESTNAME

      - name: Record Test End Time
        run: echo "TEST_END_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Calculate Total Time Taken
        run: |
          TEST_TIME=$(($TEST_END_TIME - $TEST_START_TIME))
          TEST_TIME_HOURS=$(($TEST_TIME / 3600))
          TEST_TIME_MINS=$((($TEST_TIME % 3600) / 60))
          TEST_TIME_SECS=$(($TEST_TIME % 60))
          echo "Test runtime: ${TEST_TIME_HOURS}h ${TEST_TIME_MINS}m ${TEST_TIME_SECS}s"
          echo "TEST_TIME_HOURS=$TEST_TIME_HOURS" >> $GITHUB_ENV
          echo "TEST_TIME_MINS=$TEST_TIME_MINS" >> $GITHUB_ENV
          echo "TEST_TIME_SECS=$TEST_TIME_SECS" >> $GITHUB_ENV

      - name: Send Slack Notification
        if: always() && (github.event.inputs.send_slack_notification == 'true')
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          S3_BUCKET_NAME: "simplyblock-e2e-test-logs"
          RUN_ID: ${{ github.run_id }}
          PASSED_TESTS: ${{ env.PASSED_TESTS }}
          FAILED_TESTS: ${{ env.FAILED_TESTS }}
          TOTAL_TESTS: ${{ env.TOTAL_TESTS }}
          PASSED_CASES: ${{ env.PASSED_CASES }}
          FAILED_CASES: ${{ env.FAILED_CASES }}
          PASSED_CASES_BULLETS: ${{ env.PASSED_CASES_BULLETS }}
          FAILED_CASES_BULLETS: ${{ env.FAILED_CASES_BULLETS }}
          BRANCH_NAME: ${{ github.ref_name }}
          TEST_TIME_HOURS: ${{ env.TEST_TIME_HOURS }}
          TEST_TIME_MINS: ${{ env.TEST_TIME_MINS }}
          TEST_TIME_SECS: ${{ env.TEST_TIME_SECS }}
          NDCS: ${{ github.event.inputs.ndcs }}
          NPCS: ${{ github.event.inputs.npcs }}
          CHUNK_BS: ${{ github.event.inputs.chunk_bs }}
          BS: ${{ github.event.inputs.bs }}
        run: |
          GITHUB_RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID}"
          AWS_LOGS_URL="https://s3.console.aws.amazon.com/s3/buckets/${S3_BUCKET_NAME}?prefix=${RUN_ID}/&region=us-east-2"
          if [[ ${{ job.status }} == 'success' ]]; then
            OVERALL_STATUS=":white_check_mark: Overall Status: SUCCESS"
          else
            OVERALL_STATUS=":x: Overall Status: FAILURE"
          fi

          TIME_TAKEN="${TEST_TIME_HOURS}h ${TEST_TIME_MINS}m ${TEST_TIME_SECS}s"

          MESSAGE="Python E2E tests run triggered on branch **${BRANCH_NAME}**. \nTotal Time Taken to run the tests: ${TIME_TAKEN}. \n\n${OVERALL_STATUS}\nGitHub Run: ${GITHUB_RUN_URL}\nAWS Logs: ${AWS_LOGS_URL}\n\n**Configuration**: \nNDCS: ${{ env.NDCS }}\nNPCS: ${{ env.NPCS }}\nBlock Size: ${{ env.BS }}\nChunk Block Size: ${{ env.CHUNK_BS }}\n\nTotal Tests: ${{ env.TOTAL_TESTS }}\nPassed Tests: ${{ env.PASSED_TESTS }}\nFailed Tests: ${{ env.FAILED_TESTS }}\n\n-- Test Cases Passed :white_check_mark:\n${{ env.PASSED_CASES_BULLETS }}\n\n-- Test Cases Failed :x:\n${{ env.FAILED_CASES_BULLETS }}"

          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MESSAGE}\"}" $SLACK_WEBHOOK_URL

      - name: Destroy Cluster
        if: always()
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform destroy --auto-approve

      - name: Cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
