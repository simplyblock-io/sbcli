name: E2E Tests

on:
  push:
    branches:
      - main
      - e2e-fixes
  schedule:
    - cron: '0 5 * * *'  # Runs every day at 5 AM UTC
  workflow_dispatch:
    inputs:
      simplyBlockDeploy_branch:
        description: ''
        required: true
        default: 'main'
      sbcli_cmd:
        description: ''
        required: true
        default: 'sbcli-dev'
jobs:
  e2e:
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - run: go version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Clone simplyBlockDeploy repo
        run: |
          git clone -b ${{ github.event.inputs.simplyBlockDeploy_branch || 'main'}} git@github.com:simplyblock-io/simplyBlockDeploy.git $GITHUB_WORKSPACE/simplyBlockDeploy

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform init

      - name: select or create workspace
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform workspace select -or-create githubactions-sbclie2e

      - name: Validate Terraform Configuration
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform validate

      - name: Plan Terraform Changes
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform plan \
            -var "mgmt_nodes=1" -var "storage_nodes=3" \
            -var "extra_nodes=1" -var "extra_nodes_instance_type=m6id.large" \
            -var "region=us-east-2" -var "sbcli_cmd=${{ github.event.inputs.sbcli_cmd || 'sbcli-dev' }}" -out=tfplan

      - name: Apply Terraform Changes
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          terraform apply tfplan

      - name: Bootstrap Cluster
        run: |
          cd $GITHUB_WORKSPACE/simplyBlockDeploy
          ./bootstrap-cluster.sh --memory 8g --cpu-mask 0x3 --iobuf_small_pool_count 10000 --iobuf_large_pool_count 25000
        id: bootstrap_cluster
        env:
          SBCLI_CMD: ${{ github.event.inputs.sbcli_cmd || 'sbcli-dev' }}

      - name: Setup Tests
        run: |
          cd $GITHUB_WORKSPACE/e2e
          python3 -m pip install -r requirements.txt
          echo "Running tests in namespace ${{ steps.get-namespace.outputs.namespace }}"
          export CLUSTER_ID=${{ steps.bootstrap_cluster.outputs.cluster_id }}
          export CLUSTER_SECRET=${{ steps.bootstrap_cluster.outputs.cluster_secret }}
          export CLUSTER_IP=${{ steps.bootstrap_cluster.outputs.cluster_ip }}
          export API_BASE_URL=${{ steps.bootstrap_cluster.outputs.cluster_api_gateway_endpoint }}
          export BASTION_SERVER=${ terraform output -raw bastion_public_ip }

      - name: Run tests
        run: |
          cd $GITHUB_WORKSPACE/e2e
          python3 e2e.py

      - name: Upload docker logs to s3
        run: $GITHUB_WORKSPACE/simplyBlockDeploy/upload_docker_logs_to_s3.sh
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: "simplyblock-e2e-test-logs"
          RUN_ID: ${{ github.run_id }}

      - name: Send Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [[ ${{ job.status }} == 'success' ]]; then
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Python E2E tests successfully completed!"}' $SLACK_WEBHOOK_URL
          else
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Python E2E tests failed!"}' $SLACK_WEBHOOK_URL
          fi

      - name: Destroy Cluster
        if: always()
        run: terraform destroy --auto-approve

      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
