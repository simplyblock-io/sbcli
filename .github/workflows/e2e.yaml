name: E2E Tests

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 5 * * *'  # Runs every day at 5 AM UTC
  workflow_dispatch:
    inputs:
      simplyBlockDeploy_branch:
        description: ''
        required: true
        default: 'main'
      sbcli_cmd:
        description: ''
        required: true
        default: 'sbcli-dev'
jobs:
  e2e:
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - run: go version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Clone simplyBlockDeploy repo
        run: git clone -b ${{ github.event.inputs.simplyBlockDeploy_branch || 'main'}} https://github.com/simplyblock-io/simplyBlockDeploy.git

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        run: terraform init

      - name: select or create workspace
        run: terraform workspace select -or-create githubactions

      - name: Validate Terraform Configuration
        run: terraform validate

      - name: Plan Terraform Changes
        run: |
          terraform plan \
            -var "mgmt_nodes=1" -var "storage_nodes=3" \
            -var "extra_nodes=1" -var "extra_nodes_instance_type=m6id.large" \
            -var "region=us-east-2" -var "sbcli_cmd=${{ github.event.inputs.sbcli_cmd || 'sbcli-dev' }}" -out=tfplan

      - name: Apply Terraform Changes
        run: terraform apply tfplan

      - name: Bootstrap Cluster
        run: |
          cd simplyBlockDeploy
          ./bootstrap-cluster.sh --memory 8g --cpu-mask 0x3 --iobuf_small_pool_count 10000 --iobuf_large_pool_count 25000
        id: bootstrap_cluster
        env:
          SBCLI_CMD: ${{ github.event.inputs.sbcli_cmd || 'sbcli-dev' }}

      # - name: Bootstrap Cluster
      #   run: $GITHUB_WORKSPACE/bootstrap-k3s.sh
      #   id: bootstrap_k3s

      # - name: copying  Kubeconfig file
      #   run: |
      #     mkdir -p ${HOME}/.kube
      #     scp -o StrictHostKeyChecking=no -i ${{ steps.bootstrap_k3s.outputs.KEY }} ec2-user@${{ steps.bootstrap_k3s.outputs.extra_node_ip }}:/etc/rancher/k3s/k3s.yaml ${HOME}/.kube/config

      # - name: update .kube/config address
      #   run: |
      #     sed -i "s/127.0.0.1/${{ steps.bootstrap_k3s.outputs.extra_node_ip }}/g" ${HOME}/.kube/config

      # - name: Label Node type=cache
      #   run: |
      #     nodes=$(kubectl get nodes -o jsonpath='{.items[*].metadata.name}')

      #     for node in $nodes; do
      #         kubectl label nodes $node type=cache
      #     done

      #     kubectl get nodes --show-labels

      # - name: Install SPDK-CSI using Helm
      #   run: |
      #     cd spdk-csi/charts/latest/spdk-csi
      #     helm install -n spdk-csi --create-namespace spdk-csi ./ \
      #        --set csiConfig.simplybk.uuid=${{ steps.bootstrap_cluster.outputs.cluster_id }} \
      #        --set csiConfig.simplybk.ip=${{ steps.bootstrap_cluster.outputs.cluster_api_gateway_endpoint }} \
      #        --set csiSecret.simplybk.secret=${{ steps.bootstrap_cluster.outputs.cluster_secret }} \
      #        --set logicalVolume.pool_name=testing1 \
      #        --set image.simplyblock.tag=dev

      - name: Setup Tests
        run: |
          cd $GITHUB_WORKSPACE/e2e
          python3 -m pip install -r requirements.txt
          echo "Running tests in namespace ${{ steps.get-namespace.outputs.namespace }}"
          export CLUSTER_ID=${{ steps.bootstrap_cluster.outputs.cluster_id }}
          export CLUSTER_SECRET=${{ steps.bootstrap_cluster.outputs.cluster_secret }}
          export CLUSTER_IP=${{ steps.bootstrap_cluster.outputs.cluster_ip }}
          export API_BASE_URL=${{ steps.bootstrap_cluster.outputs.cluster_api_gateway_endpoint }}
          export BASTION_SERVER=${{ steps.apply_terraform_changes.outputs.bastion_public_ip }}

      - name: Run tests
        run: |
          cd $GITHUB_WORKSPACE/e2e
          python3 e2e.py

      # - name: Upload docker logs to s3
      #   run: $GITHUB_WORKSPACE/upload_docker_logs_to_s3.sh
      #   if: always()
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #     S3_BUCKET_NAME: "simplyblock-e2e-test-logs"
      #     RUN_ID: ${{ github.run_id }}

      # - name: Send Slack Notification
      #   if: always()
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   run: |
      #     if [[ ${{ job.status }} == 'success' ]]; then
      #       curl -X POST -H 'Content-type: application/json' --data '{"text":"Python E2E tests successfully completed!"}' $SLACK_WEBHOOK_URL
      #     else
      #       curl -X POST -H 'Content-type: application/json' --data '{"text":"Python E2E tests failed!"}' $SLACK_WEBHOOK_URL
      #     fi

      - name: Destroy Cluster
        if: always()
        run: terraform destroy --auto-approve

      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
